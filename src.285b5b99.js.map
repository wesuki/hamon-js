{"version":3,"sources":["src/stone.js","src/wave.js","src/background.js","src/input.js","src/controllers.js","src/levels.js","src/game.js","src/index.js"],"names":["StoneConfig","radius","activeColor","inactiveColor","waveRangeColor","ringWidth","successColor","indicatorColor","Stone","game","position","targetN","initN","N","showRange","deltaTime","ctx","beginPath","arc","x","y","Math","PI","strokeStyle","setLineDash","stroke","i","fillStyle","fill","font","textAlign","fillText","level","waveRange","dx","dy","r","event","mouseDownTime","timeStamp","console","log","waves","push","newWaveAt","wave","Wave","speed","range","initRadius","active","newRadius","stones","stone","d2","handleWave","lineWidth","Background","rect","gameWidth","gameHeight","InputHandler","canvas","mouseDownStone","addEventListener","pos","offsetX","offsetY","isPointInPath","handleClick","handleMouseDown","handleMouseUp","SelectLevelController","selectElement","levels","forEach","option","document","createElement","value","text","difficulty","name","appendChild","levelSelected","target","selectedIndex","setLevel","index","Event","dispatchEvent","alert","options","length","ShowSolutionController","elements","showSolution","hideSolution","levelBluePrint","userInput","prompt","result","trim","getLevelBluePrint","isTutorial","textType","checkPasscode","innerText","tutorial","howtosolve","solutionText","buildLevel","levelStones","map","params","j","iMax","max","ls","jMax","iMin","min","jMin","iRange","waveSpeed","jRange","d","levelTestSolved","levelNoClick","levelWaveRange","levelDual","levelEcho","levelRT345","levelAlice","levelOrder","levelEquality","levelTest","levelOneTwoThree","levelCross","level7th","levelChitChat","levelTiming","remark","allLevels","concat","GameState","Menu","Running","Paused","GameOver","Game","prepareFunctions","prepareGameOver","updateFunctions","updateRunning","updateGameOver","drawFunctions","drawRunning","drawGameOver","width","height","gameObjects","inputHandler","selectLevelMenuController","selectLevel","resetLevel","resetCurrentLevel","previousLevel","changeToPrevious","nextLevel","changeToNext","showSolutionController","getLevel","setGameState","newState","gameState","prepare","update","draw","solved","isSolved","object","verdict","filter","every","getElementById","innerHTML","getContext","startGameLoop","lastTime","requestAnimationFrame","gameLoop","timestamp","undefined","clearRect"],"mappings":"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","file":"src.285b5b99.js","sourceRoot":"..","sourcesContent":["export const StoneConfig = {\r\n  radius: 10,\r\n  activeColor: \"#582520\",\r\n  inactiveColor: \"#582520\", //\"#a5655499\",\r\n  waveRangeColor: \"rgba(127,127,255)\",\r\n  ringWidth: 3,\r\n  successColor: \"#ffe19a\",\r\n  indicatorColor: \"#cb835599\"\r\n  // colors from: https://coolors.co/ffe19a-ffc15d-cb8355-a56554-582520\r\n};\r\n\r\nexport default class Stone {\r\n  constructor(game, position, targetN, initN) {\r\n    this.game = game;\r\n\r\n    this.position = position;\r\n    this.radius = StoneConfig.radius;\r\n\r\n    this.targetN = targetN;\r\n    this.initN = initN;\r\n    this.N = this.initN;\r\n\r\n    this.showRange = false;\r\n  }\r\n\r\n  update(deltaTime) {}\r\n\r\n  draw(ctx) {\r\n    // target indicator\r\n    // a dashed circle, distance to stone indicates the target\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      this.position.x,\r\n      this.position.y,\r\n      this.radius + StoneConfig.ringWidth * (this.targetN + 1),\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.strokeStyle = StoneConfig.waveRangeColor;\r\n    ctx.setLineDash([5, 5]);\r\n    ctx.stroke();\r\n    ctx.setLineDash([]);\r\n\r\n    for (let i = this.targetN - this.N + 1; i > 0; i--) {\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.radius + StoneConfig.ringWidth * i,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.fillStyle = StoneConfig.indicatorColor;\r\n      ctx.fill();\r\n    }\r\n\r\n    // fulfilled indicator\r\n    // this must be before the stone circle in orde to appear as a ring\r\n    if (this.N <= this.targetN) {\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.radius + StoneConfig.ringWidth,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.fillStyle = StoneConfig.successColor;\r\n      ctx.fill();\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.radius + StoneConfig.ringWidth,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.strokeStyle = StoneConfig.waveRangeColor;\r\n      ctx.stroke();\r\n    }\r\n\r\n    // stone itself\r\n    ctx.beginPath();\r\n    ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\r\n    ctx.fillStyle =\r\n      this.N > 0 ? StoneConfig.activeColor : StoneConfig.inactiveColor;\r\n    ctx.fill();\r\n\r\n    // // target count\r\n    // ctx.font = \"12px Arial\";\r\n    // ctx.fillStyle = \"white\";\r\n    // ctx.textAlign = \"center\";\r\n    // ctx.fillText(this.targetN, this.position.x, this.position.y + 5);\r\n\r\n    // // current count\r\n    // ctx.font = \"15px Arial\";\r\n    // ctx.fillStyle = \"black\";\r\n    // ctx.textAlign = \"center\";\r\n    // ctx.fillText(this.N, this.position.x, this.position.y - 12);\r\n\r\n    // // simplified count\r\n    // ctx.font = \"12px Arial\";\r\n    // ctx.fillStyle = \"white\";\r\n    // ctx.textAlign = \"center\";\r\n    // ctx.fillText(this.targetN - this.N, this.position.x, this.position.y + 5);\r\n\r\n    if (this.N === 0) {\r\n      // draw an \"X\"\r\n      ctx.font = \"12px Arial\";\r\n      ctx.fillStyle = \"white\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"X\", this.position.x, this.position.y + 4);\r\n    }\r\n\r\n    if (this.showRange) {\r\n      // range front as a circle\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.game.level.waveRange,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.strokeStyle = StoneConfig.waveRangeColor;\r\n      ctx.setLineDash([5, 5]);\r\n      ctx.stroke();\r\n      ctx.setLineDash([]);\r\n    }\r\n  }\r\n\r\n  isPointInPath(position) {\r\n    let dx = position.x - this.position.x;\r\n    let dy = position.y - this.position.y;\r\n    let r = this.radius;\r\n    return dx * dx + dy * dy <= r * r;\r\n  }\r\n\r\n  handleMouseDown(event) {\r\n    this.showRange = true;\r\n    this.mouseDownTime = event.timeStamp;\r\n  }\r\n\r\n  handleMouseUp(event) {\r\n    this.showRange = false;\r\n  }\r\n\r\n  handleClick(event) {\r\n    console.log(\"Clicked\");\r\n    if (this.N > 0 && event.timeStamp < this.mouseDownTime + 500) {\r\n      this.N = 0;\r\n      this.game.waves.push(this.game.newWaveAt(this.position));\r\n    }\r\n  }\r\n\r\n  handleWave(wave) {\r\n    this.N += 1;\r\n  }\r\n}\r\n","export default class Wave {\r\n  constructor(game, position, speed, range, initRadius) {\r\n    this.game = game;\r\n\r\n    this.position = position;\r\n    this.speed = speed;\r\n    this.range = range;\r\n    this.radius = initRadius;\r\n\r\n    this.active = true;\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (this.active) {\r\n      let newRadius = this.radius + (this.speed * deltaTime) / 1000;\r\n      for (let stone of this.game.stones) {\r\n        let dx = this.position.x - stone.position.x;\r\n        let dy = this.position.y - stone.position.y;\r\n        let d2 = dx * dx + dy * dy;\r\n        let r2 = this.radius * this.radius;\r\n        let nr2 = newRadius * newRadius;\r\n        if (r2 < d2 && nr2 >= d2) {\r\n          stone.handleWave(this);\r\n        }\r\n      }\r\n      this.radius = newRadius;\r\n      if (this.radius > this.range) {\r\n        this.active = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    if (this.active) {\r\n      // wave front as a circle\r\n      ctx.beginPath();\r\n      ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\r\n      ctx.strokeStyle = `rgba(127,127,255,${1.1 - this.radius / this.range})`;\r\n      const lineWidth = ctx.lineWidth;\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      ctx.lineWidth = lineWidth;\r\n    }\r\n  }\r\n}\r\n","export default class Background {\r\n  constructor(game) {\r\n    this.game = game;\r\n  }\r\n\r\n  update(deltaTime) {}\r\n\r\n  draw(ctx) {\r\n    ctx.beginPath();\r\n    ctx.rect(0, 0, this.game.gameWidth, this.game.gameHeight);\r\n    ctx.fillStyle = \"#d8e2dc\";\r\n    ctx.fill();\r\n  }\r\n}\r\n","export default class InputHandler {\r\n  constructor(canvas, game) {\r\n    canvas.addEventListener(\"click\", (event) => {\r\n      // console.log(event);\r\n      let pos = { x: event.offsetX, y: event.offsetY };\r\n      for (let stone of game.stones) {\r\n        if (stone.isPointInPath(pos)) {\r\n          stone.handleClick(event);\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    var mouseDownStone;\r\n    canvas.addEventListener(\"mousedown\", (event) => {\r\n      // console.log(event);\r\n      let pos = { x: event.offsetX, y: event.offsetY };\r\n      for (let stone of game.stones) {\r\n        if (stone.isPointInPath(pos)) {\r\n          stone.handleMouseDown(event);\r\n          mouseDownStone = stone;\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    canvas.addEventListener(\"mouseup\", (event) => {\r\n      // console.log(event);\r\n      if (mouseDownStone) mouseDownStone.handleMouseUp(event);\r\n    });\r\n  }\r\n}\r\n","export class SelectLevelController {\r\n  constructor({ game, selectElement, levels }) {\r\n    this.selectElement = selectElement;\r\n    this.game = game;\r\n    this.levels = levels;\r\n\r\n    levels.forEach((level, i) => {\r\n      let option = document.createElement(\"option\");\r\n      option.value = i;\r\n      option.text = `(${level.difficulty}) ${level.name}`;\r\n      selectElement.appendChild(option);\r\n    });\r\n\r\n    selectElement.addEventListener(\"change\", (event) => {\r\n      let levelSelected = levels[event.target.selectedIndex];\r\n      if (levelSelected) this.game.setLevel(levelSelected);\r\n      // console.log(event);\r\n    });\r\n  }\r\n\r\n  getLevel() {\r\n    return this.levels[this.selectElement.value];\r\n  }\r\n\r\n  changeToPrevious() {\r\n    let index = this.selectElement.selectedIndex - 1;\r\n    if (0 <= index) {\r\n      this.selectElement.selectedIndex = index;\r\n      let event = new Event(\"change\");\r\n      this.selectElement.dispatchEvent(event);\r\n    } else {\r\n      alert(`\r\n      You are at the beginning.\r\n      There is no previous level.\r\n      `);\r\n    }\r\n  }\r\n\r\n  changeToNext() {\r\n    let index = this.selectElement.selectedIndex + 1;\r\n    if (index < this.selectElement.options.length) {\r\n      this.selectElement.selectedIndex = index;\r\n      let event = new Event(\"change\");\r\n      this.selectElement.dispatchEvent(event);\r\n    } else {\r\n      alert(`\r\n      You are at the end.\r\n      There is no next level.\r\n      `);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ShowSolutionController {\r\n  constructor({ game, elements }) {\r\n    this.elements = elements;\r\n    this.game = game;\r\n\r\n    this.elements.showSolution.addEventListener(\"click\", (event) => {\r\n      if (this.elements.showSolution.value === \"show\") {\r\n        this.showSolution();\r\n      } else {\r\n        this.hideSolution();\r\n      }\r\n    });\r\n  }\r\n\r\n  getLevelBluePrint() {\r\n    return this.game.levelBluePrint;\r\n  }\r\n\r\n  checkPasscode() {\r\n    let userInput = prompt(\"Passcode:\", \"[level name as it is]\");\r\n    let result = userInput?.trim() === this.getLevelBluePrint().name.trim();\r\n    if (!result) {\r\n      alert(\"Sorry, wrong passcode.\");\r\n    }\r\n    return result;\r\n  }\r\n\r\n  showSolution() {\r\n    const levelBluePrint = this.getLevelBluePrint();\r\n    const isTutorial = levelBluePrint.difficulty === \"tutorial\";\r\n    const textType = isTutorial ? \"Tutorial\" : \"Solution\";\r\n    if (isTutorial || this.checkPasscode()) {\r\n      this.elements.showSolution.value = \"hide\";\r\n      this.elements.showSolution.innerText = `Hide ${textType}`;\r\n      const text =\r\n        (isTutorial ? levelBluePrint.tutorial : levelBluePrint.howtosolve) ??\r\n        \"(not found)\";\r\n      this.elements.solutionText.innerText = `${textType}: ${text}`;\r\n    }\r\n  }\r\n\r\n  hideSolution() {\r\n    const levelBluePrint = this.getLevelBluePrint();\r\n    const isTutorial = levelBluePrint.difficulty === \"tutorial\";\r\n    const textType = isTutorial ? \"Tutorial\" : \"Solution\";\r\n    this.elements.showSolution.value = \"show\";\r\n    this.elements.showSolution.innerText = `Show ${textType}`;\r\n    this.elements.solutionText.innerText = null;\r\n  }\r\n}\r\n","import Stone from \"/src/stone\";\r\n\r\nexport function buildLevel(game, level) {\r\n  let levelStones = level.stones.map((params) => {\r\n    return { i: params[0], j: params[1], targetN: params[2], initN: params[3] };\r\n  });\r\n  // console.log(levelStones);\r\n\r\n  let iMax = Math.max(...levelStones.map((ls) => ls.i));\r\n  let jMax = Math.max(...levelStones.map((ls) => ls.j));\r\n  // console.log(\"iMax: \" + iMax + \", \" + \"jMax: \" + jMax);\r\n\r\n  let iMin = Math.min(...levelStones.map((ls) => ls.i));\r\n  let jMin = Math.min(...levelStones.map((ls) => ls.j));\r\n  // console.log(\"iMin: \" + iMin + \", \" + \"jMin: \" + jMin);\r\n\r\n  let iRange = {\r\n    min: iMin - level.waveSpeed * 2,\r\n    max: iMax + level.waveSpeed * 2,\r\n    center: (iMin + iMax) / 2\r\n  };\r\n  let jRange = {\r\n    min: jMin - level.waveSpeed * 2,\r\n    max: jMax + level.waveSpeed * 2,\r\n    center: (jMin + jMax) / 2\r\n  };\r\n  // console.log(iRange, jRange);\r\n\r\n  let dx = game.gameWidth / Math.max(1, iRange.max - iRange.min);\r\n  let dy = game.gameHeight / Math.max(1, jRange.max - jRange.min);\r\n  let d = Math.min(dx, dy);\r\n  // console.log(dx, dy);\r\n  let stones = levelStones.map((ls) => {\r\n    let x = (ls.i - iRange.center) * d + game.gameWidth / 2;\r\n    let y = (ls.j - jRange.center) * d + game.gameHeight / 2;\r\n    return new Stone(game, { x: x, y: y }, ls.targetN, ls.initN);\r\n  });\r\n  // console.log(stones);\r\n  return {\r\n    stones: stones,\r\n    waveRange: level.waveRange * d,\r\n    waveSpeed: level.waveSpeed * d\r\n  };\r\n}\r\n\r\nexport const levelTestSolved = {\r\n  name: \"just click\",\r\n  difficulty: \"tutorial\",\r\n  tutorial: `\r\n  Touch (click) the stone to make a wave.\r\n  `,\r\n  stones: [[0, 0, 0, 1]],\r\n  waveRange: 2,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelNoClick = {\r\n  name: \"no click\",\r\n  difficulty: \"tutorial\",\r\n  tutorial: `\r\n  When there is an \"X\" on the stone, you can not make a wave from it.\r\n  `,\r\n  stones: [\r\n    [0, 0, 0, 1],\r\n    [2, 0, 0, 0]\r\n  ],\r\n  waveRange: 1.5,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelWaveRange = {\r\n  name: \"wave range\",\r\n  difficulty: \"tutorial\",\r\n  tutorial: `\r\n  A wave will take away one layer of the stone.\r\n  Hold to check the wave range.\r\n  `,\r\n  stones: [\r\n    [0, 0, 0, 1],\r\n    [2, 0, 1, 0]\r\n  ],\r\n  waveRange: 3,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelDual = {\r\n  name: \"dual\",\r\n  difficulty: \"tutorial\",\r\n  tutorial: `\r\n  Sometimes you need to act before a wave passes.\r\n  `,\r\n  howtosolve: `\r\n    - Touch any stone.\r\n    - Before the wave arrives at the other stone, touch the other stone.\r\n    `,\r\n  stones: [\r\n    [0, 0, 1, 2],\r\n    [2, 0, 1, 2]\r\n  ],\r\n  waveRange: 3,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelEcho = {\r\n  name: \"echo\",\r\n  difficulty: \"tutorial\",\r\n  tutorial: `\r\n  A stone restores its layers when you make a wave with it.\r\n  `,\r\n  howtosolve: `\r\n    - Touch the center stone.\r\n    - After the wave reaches the other two, touch the other stones.\r\n    `,\r\n  stones: [\r\n    [0, 0, 2, 1],\r\n    [2, 0, 0, 0],\r\n    [-2, 0, 0, 0]\r\n  ],\r\n  waveRange: 3,\r\n  waveSpeed: 1\r\n};\r\n\r\n// export const levelTestOutOfMove = {\r\n//   name: \"bound to fail\",\r\n//   difficulty: \"tutorial\",\r\n//   tutorial: `\r\n//   The game will detect when there is no move available.\r\n//   (There is no way to solve this one.)\r\n//   `,\r\n//   stones: [[0, 0, 3, 1]],\r\n//   waveRange: 1,\r\n//   waveSpeed: 1\r\n// };\r\n\r\nexport const levelRT345 = {\r\n  name: \"right triangle\",\r\n  difficulty: \"hard\",\r\n  howtosolve: `\r\n  - Touch the upper left corner stone. \r\n  - Before the wave reaches the right, touch the right stone.\r\n  - After the wave passes, touch the bottom stone. \r\n  - After the wave passes, touch the center stone.\r\n  `,\r\n  stones: [\r\n    [0, 0, 3, 1],\r\n    [4, 0, 2, 2],\r\n    [0, 3, 1, 3],\r\n    [1, 1, 0, 0]\r\n  ],\r\n  waveRange: 4,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelAlice = {\r\n  name: \"alice\",\r\n  difficulty: \"hard\",\r\n  howtosolve: `\r\n  - Touch the top stone.\r\n  - After the wave passes, touch the bottom stone. \r\n  - Before the wave reaches the right, touch the right stone.\r\n  - After the wave passes, touch the left stone.\r\n  `,\r\n  stones: [\r\n    [2, 2, 3, 1], // a\r\n    [5, 3, 1, 3], // b\r\n    [3, 5, 2, 2], // c\r\n    [0, 3, 0, 0] // d\r\n  ],\r\n  waveRange: 4,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelOrder = {\r\n  difficulty: \"medium\",\r\n  name: \"order\",\r\n  howtosolve: `\r\n  Always wait until the current wave fades before proceeding to the next step.\r\n  - Touch the right bottom stone.\r\n  - Touch the bottom-left and the top-right stones at the same time.\r\n  - Touch the top-left stone.\r\n  - Touch the center stone.\r\n  `,\r\n  stones: [\r\n    [2, 2, 0, 2],\r\n    [0, 0, 1, 2],\r\n    [4, 0, 2, 2],\r\n    [0, 4, 2, 2],\r\n    [4, 4, 3, 2]\r\n  ],\r\n  waveRange: 4,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelEquality = {\r\n  name: \"equality\",\r\n  difficulty: \"hard\",\r\n  howtosolve: `\r\n  - Touch all the corner stones.\r\n  - *After* the first wave passes the center but *befor* the second wave arrives, \r\n  touch the center stone.\r\n  `,\r\n  stones: [\r\n    [2, 2, 3, 2],\r\n    [0, 0, 3, 2],\r\n    [4, 0, 3, 2],\r\n    [0, 4, 3, 2],\r\n    [4, 4, 3, 2]\r\n  ],\r\n  waveRange: 5,\r\n  waveSpeed: 0.75\r\n};\r\n\r\nconst levelOneTwoThree = {\r\n  name: \"one, two, three\",\r\n  difficulty: \"easy\",\r\n  howtosolve: `\r\n  - Touch the left stone.\r\n  - After the wave passes, touch the middle stone.\r\n  - After the wave passes, touch the right stone.\r\n  `,\r\n  stones: [\r\n    [-2, 0, 1, 2],\r\n    [0, 0, 1, 1],\r\n    [2, 0, 0, 0]\r\n  ],\r\n  waveRange: 3,\r\n  waveSpeed: 1\r\n};\r\n\r\n// const sqrt3 = Math.sqrt(3);\r\n// export const hexgon = {\r\n//   name: \"test level\",\r\n//   difficulty: \"???\",\r\n//   howtosolve: `\r\n//   - Touch any stone.\r\n//   - Before the wave arrives at the other stone, touch the other stone.\r\n//   `,\r\n//   stones: [\r\n//     [0, -sqrt3, 0, 1],\r\n//     [2, -sqrt3, 1, 0],\r\n//     [-1, 0, 0, 1],\r\n//     [3, 0, 1, 0],\r\n//     [0, sqrt3, 0, 1],\r\n//     [2, sqrt3, 1, 0]\r\n//   ],\r\n//   waveRange: 3,\r\n//   waveSpeed: 1\r\n// };\r\n\r\nconst levelCross = {\r\n  name: \"cross\",\r\n  difficulty: \"easy\",\r\n  howtosolve: `\r\n  - Touch the top and the bottom stones at the same time.\r\n  - After the waves pass, touch the left and the right stones at the same time.\r\n  `,\r\n  stones: [\r\n    [0, -1, 3, 3],\r\n    [1, 0, 1, 0],\r\n    [0, 1, 3, 3],\r\n    [-1, 0, 1, 0]\r\n  ],\r\n  waveRange: 3,\r\n  waveSpeed: 1\r\n};\r\n\r\nconst level7th = {\r\n  name: \"7th\",\r\n  difficulty: \"medium\",\r\n  howtosolve: `\r\n  Always wait until the current wave fades before proceeding to the next step.\r\n  - Touch the top-left stone.\r\n  - Touch the mid-left stone.\r\n  - Touch the top-mid stone.\r\n  - Touch the bottom-mid stone.\r\n  - Touch the center stone.\r\n  - Touch the bottom-left stone.\r\n  `,\r\n  stones: [\r\n    [0, 0, 2, 2], // 1\r\n    [1, 0, 1, 1], // 2\r\n    [2, 0, 1, 0], // 3\r\n    [0, 1, 2, 2], // 4\r\n    [1, 1, 0, 0], // 5\r\n    [2, 1, 1, 0], // 6\r\n    [0, 2, 0, 0], // 7\r\n    [1, 2, 2, 2], // 8\r\n    [2, 2, 1, 0] // 9\r\n  ],\r\n  waveRange: 1,\r\n  waveSpeed: 0.75\r\n};\r\n\r\nconst levelChitChat = {\r\n  difficulty: \"easy\",\r\n  name: \"chit-chat\",\r\n  howtosolve: `\r\n  Always wait until the current wave(s) fade before proceeding to the next step.\r\n  - Touch the center stone and the left stone.\r\n  - Touch the center stone and the bottom stone.\r\n  - Touch the center stone and the right stone.\r\n  - Touch the center stone and the top stone.\r\n  `,\r\n  stones: [\r\n    [0, 0, 1, 1],\r\n    [-2, 0, 4, 1],\r\n    [0, 2, 3, 0],\r\n    [2, 0, 2, 0],\r\n    [0, -2, 1, 0]\r\n  ],\r\n  waveRange: 2.5,\r\n  waveSpeed: 1\r\n};\r\n\r\nexport const levelTiming = {\r\n  name: \"timing\",\r\n  difficulty: \"medium\",\r\n  howtosolve: `\r\n  - Touch the middle stone to make the left and the right touchable.\r\n  - Touch the left stone.\r\n  - After the wave arrives at the middle stone, but before it arrives the right, touch the middle and the right stone at the same time.\r\n  `,\r\n  remark: `\r\n  This is the simplest puzzle requires complex timed moves to solve.\r\n  `,\r\n  stones: [\r\n    [0, 0, 2, 0],\r\n    [1, 0, 1, 1],\r\n    [3, 0, 2, 0]\r\n  ],\r\n  waveRange: 3,\r\n  waveSpeed: 1\r\n};\r\n\r\n// Copy and uncomment this block to make your new level\r\n// export const levelTest = {\r\n//   name: \"test level\",\r\n//   difficulty: \"???\",\r\n//   howtosolve: `\r\n//   - Touch any stone.\r\n//   - Before the wave arrives at the other stone, touch the other stone.\r\n//   `,\r\n//   hint: null,   // something you'd like to say to help the player solve the puzzle\r\n//   remark: null, // something you'd like to say after the player has solved the puzzle\r\n//   stones: [\r\n//     [0, 0, 0, 1],\r\n//     [2, 0, 1, 0],\r\n//   ],\r\n//   waveRange: 3,\r\n//   waveSpeed: 1\r\n// };\r\n\r\nvar levelTest;\r\nexport const allLevels = [].concat(\r\n  /* `levelTest` appears first if present */\r\n  levelTest ? [levelTest] : [],\r\n  /* all the actual levels */\r\n  [\r\n    /* Tutorial levels */\r\n    levelTestSolved,\r\n    levelNoClick,\r\n    levelWaveRange,\r\n    levelDual,\r\n    levelEcho,\r\n    /* Easy levels */\r\n    levelOneTwoThree,\r\n    levelCross,\r\n    levelChitChat,\r\n    /* Medium levels */\r\n    levelOrder,\r\n    level7th,\r\n    levelTiming,\r\n    /* Hard levels */\r\n    levelAlice,\r\n    levelRT345,\r\n    levelEquality\r\n  ]\r\n);\r\n\r\n// export const testLevel = levelRT345;\r\n","import { StoneConfig } from \"/src/stone\";\r\nimport Wave from \"/src/wave\";\r\nimport Background from \"/src/background\";\r\n\r\nimport InputHandler from \"/src/input\";\r\nimport {\r\n  SelectLevelController,\r\n  ShowSolutionController\r\n} from \"/src/controllers\";\r\n\r\nimport { buildLevel, allLevels } from \"/src/levels\";\r\n\r\nconst GameState = {\r\n  Menu: 0,\r\n  Running: 1,\r\n  Paused: 2,\r\n  GameOver: 3\r\n};\r\n\r\nexport default class Game {\r\n  constructor(elements) {\r\n    let prepareFunctions = {};\r\n    prepareFunctions[GameState.GameOver] = this.prepareGameOver;\r\n    this.prepareFunctions = prepareFunctions;\r\n\r\n    let updateFunctions = {};\r\n    updateFunctions[GameState.Running] = this.updateRunning;\r\n    updateFunctions[GameState.GameOver] = this.updateGameOver;\r\n    this.updateFunctions = updateFunctions;\r\n\r\n    let drawFunctions = {};\r\n    drawFunctions[GameState.Running] = this.drawRunning;\r\n    drawFunctions[GameState.GameOver] = this.drawGameOver;\r\n    this.drawFunctions = drawFunctions;\r\n\r\n    this.elements = elements;\r\n\r\n    this.gameWidth = this.elements.canvas.width;\r\n    this.gameHeight = this.elements.canvas.height;\r\n\r\n    this.gameObjects = [];\r\n    this.gameObjects.push(new Background(this));\r\n\r\n    // game controls\r\n    this.inputHandler = new InputHandler(this.elements.canvas, this);\r\n\r\n    this.selectLevelMenuController = new SelectLevelController({\r\n      game: this,\r\n      selectElement: this.elements.selectLevel,\r\n      levels: allLevels\r\n    });\r\n\r\n    this.elements.resetLevel.addEventListener(\"click\", (event) => {\r\n      this.resetCurrentLevel();\r\n    });\r\n\r\n    this.elements.previousLevel.addEventListener(\"click\", (event) => {\r\n      this.selectLevelMenuController.changeToPrevious();\r\n    });\r\n\r\n    this.elements.nextLevel.addEventListener(\"click\", (event) => {\r\n      this.selectLevelMenuController.changeToNext();\r\n    });\r\n\r\n    this.showSolutionController = new ShowSolutionController({\r\n      game: this,\r\n      elements\r\n    });\r\n\r\n    this.setLevel(this.selectLevelMenuController.getLevel());\r\n  }\r\n\r\n  setLevel(levelBluePrint) {\r\n    this.levelBluePrint = levelBluePrint;\r\n    this.resetCurrentLevel();\r\n  }\r\n\r\n  resetCurrentLevel() {\r\n    this.level = buildLevel(this, this.levelBluePrint);\r\n    this.stones = this.level.stones;\r\n    this.waves = [];\r\n    if (this.levelBluePrint.difficulty === \"tutorial\")\r\n      this.showSolutionController.showSolution();\r\n    else this.showSolutionController.hideSolution();\r\n    this.setGameState(GameState.Running);\r\n  }\r\n\r\n  setGameState(newState) {\r\n    if (newState === this.gameState) return;\r\n    this.gameState = newState;\r\n    this.prepare = this.prepareFunctions[this.gameState];\r\n    if (this.prepare) this.prepare();\r\n    this.update = this.updateFunctions[this.gameState];\r\n    this.draw = this.drawFunctions[this.gameState];\r\n  }\r\n\r\n  prepareGameOver() {\r\n    this.solved = this.isSolved();\r\n  }\r\n\r\n  updateGameOver(deltaTime) {}\r\n\r\n  drawGameOver(ctx) {\r\n    [...this.gameObjects, ...this.stones].forEach((object) => {\r\n      object.draw(ctx);\r\n    });\r\n\r\n    ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n    ctx.fillStyle = \"rgba(0.5,0.5,0.5,0.5)\";\r\n    ctx.fill();\r\n\r\n    ctx.font = \"30px Arial\";\r\n    ctx.fillStyle = \"white\";\r\n    ctx.textAlign = \"center\";\r\n    const verdict = this.solved ? \"Solved!\" : \"Out of Move\";\r\n    ctx.fillText(verdict, this.gameWidth / 2, this.gameHeight / 2);\r\n  }\r\n\r\n  updateRunning(deltaTime) {\r\n    [...this.gameObjects, ...this.stones, ...this.waves].forEach((object) => {\r\n      object.update(deltaTime);\r\n    });\r\n    // let prevLength = this.waves.length\r\n    this.waves = this.waves.filter((wave) => wave.active);\r\n    // let afterLength = this.waves.length\r\n    // if (prevLength !== afterLength) console.log(this.waves.length)\r\n    if (this.isSolved()) this.setGameState(GameState.GameOver);\r\n  }\r\n\r\n  drawRunning(ctx) {\r\n    [...this.gameObjects, ...this.stones, ...this.waves].forEach((object) => {\r\n      object.draw(ctx);\r\n    });\r\n  }\r\n\r\n  isSolved() {\r\n    return (\r\n      this.waves.length === 0 &&\r\n      this.stones?.every((stone) => stone.N === stone.targetN)\r\n    );\r\n  }\r\n\r\n  newWaveAt(position) {\r\n    return new Wave(\r\n      /*game*/ this,\r\n      /*position*/ position,\r\n      /*speed*/ this.level.waveSpeed,\r\n      /*range*/ this.level.waveRange,\r\n      /*initRadius*/ StoneConfig.radius\r\n    );\r\n  }\r\n}\r\n","import \"./styles.css\";\nimport Game from \"/src/game\";\n\ndocument.getElementById(\"app\").innerHTML = `\n<div class=\"container\">\n<span class=\"title\">Hamon</span>\n<span class=\"version\">v${process.env.npm_package_version}+${process.env.BUILD_VERSION}</span>\n</div>\n<div>\n  Touch stones. Make waves. Make every stone shine.\n</div>\n<br/>\n<div>\n  Current Level:\n  <select id=\"selectLevel\"></select>\n  <button id=\"previousLevel\">Previous Level</button>\n  <button id=\"resetLevel\">Reset Level</button>\n  <button id=\"nextLevel\">Next Level</button>\n</div>\n<div>\n</div>\n<div>\n  <canvas id=\"gameScreen\"></canvas>\n</div>\n<div>\n  <button id=\"showSolution\">Show Solution</button>\n  <div id=\"solutionText\"></div>\n</div>\n`;\n\nlet canvas = document.getElementById(\"gameScreen\");\ncanvas.width = 600;\ncanvas.height = 600;\nlet ctx = canvas.getContext(\"2d\");\n\nlet elements = {\n  canvas: canvas,\n  selectLevel: document.getElementById(\"selectLevel\"),\n  resetLevel: document.getElementById(\"resetLevel\"),\n  nextLevel: document.getElementById(\"nextLevel\"),\n  previousLevel: document.getElementById(\"previousLevel\"),\n  showSolution: document.getElementById(\"showSolution\"),\n  solutionText: document.getElementById(\"solutionText\")\n};\n\nlet game = new Game(elements);\n\nfunction startGameLoop() {\n  var lastTime;\n  function gameLoop(timestamp) {\n    if (timestamp !== undefined) {\n      if (lastTime !== undefined) {\n        let deltaTime = timestamp - lastTime;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        game.update(deltaTime);\n      }\n      lastTime = timestamp;\n      game.draw(ctx);\n    }\n    requestAnimationFrame(gameLoop);\n  }\n  requestAnimationFrame(gameLoop);\n}\n\nstartGameLoop();\n"]}